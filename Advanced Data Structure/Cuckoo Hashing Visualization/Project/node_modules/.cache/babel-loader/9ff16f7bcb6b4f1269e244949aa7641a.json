{"ast":null,"code":"'use strict';\n/**\n * Randomize the order of the elements in a given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Boolean} [options.copy] - Sets if should return a shuffled copy of the given array. By default it's a falsy value.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Array}\n */\n\nfunction shuffle(arr, options) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.');\n  }\n\n  options = options || {};\n  var collection = arr,\n      len = arr.length,\n      rng = options.rng || Math.random,\n      random,\n      temp;\n\n  if (options.copy === true) {\n    collection = arr.slice();\n  }\n\n  while (len) {\n    random = Math.floor(rng() * len);\n    len -= 1;\n    temp = collection[len];\n    collection[len] = collection[random];\n    collection[random] = temp;\n  }\n\n  return collection;\n}\n\n;\n/**\n * Pick one or more random elements from the given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Number} [options.picks] - Specifies how many random elements you want to pick. By default it picks 1.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Object}\n */\n\nshuffle.pick = function (arr, options) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle.pick() expect an array as parameter.');\n  }\n\n  options = options || {};\n  var rng = options.rng || Math.random,\n      picks = options.picks || 1;\n\n  if (typeof picks === 'number' && picks !== 1) {\n    var len = arr.length,\n        collection = arr.slice(),\n        random = [],\n        index;\n\n    while (picks && len) {\n      index = Math.floor(rng() * len);\n      random.push(collection[index]);\n      collection.splice(index, 1);\n      len -= 1;\n      picks -= 1;\n    }\n\n    return random;\n  }\n\n  return arr[Math.floor(rng() * arr.length)];\n};\n/**\n * Expose\n */\n\n\nmodule.exports = shuffle;","map":{"version":3,"sources":["/home/mehmet/Desktop/cuckoo_hashing/node_modules/shuffle-array/index.js"],"names":["shuffle","arr","options","Array","isArray","Error","collection","len","length","rng","Math","random","temp","copy","slice","floor","pick","picks","index","push","splice","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;AAQA,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAE7B,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACvB,UAAM,IAAII,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAEDH,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAII,UAAU,GAAGL,GAAjB;AAAA,MACIM,GAAG,GAAGN,GAAG,CAACO,MADd;AAAA,MAEIC,GAAG,GAAGP,OAAO,CAACO,GAAR,IAAeC,IAAI,CAACC,MAF9B;AAAA,MAGIA,MAHJ;AAAA,MAIIC,IAJJ;;AAMA,MAAIV,OAAO,CAACW,IAAR,KAAiB,IAArB,EAA2B;AACzBP,IAAAA,UAAU,GAAGL,GAAG,CAACa,KAAJ,EAAb;AACD;;AAED,SAAOP,GAAP,EAAY;AACVI,IAAAA,MAAM,GAAGD,IAAI,CAACK,KAAL,CAAWN,GAAG,KAAKF,GAAnB,CAAT;AACAA,IAAAA,GAAG,IAAI,CAAP;AACAK,IAAAA,IAAI,GAAGN,UAAU,CAACC,GAAD,CAAjB;AACAD,IAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBD,UAAU,CAACK,MAAD,CAA5B;AACAL,IAAAA,UAAU,CAACK,MAAD,CAAV,GAAqBC,IAArB;AACD;;AAED,SAAON,UAAP;AACD;;AAAA;AAED;;;;;;;;;AAQAN,OAAO,CAACgB,IAAR,GAAe,UAASf,GAAT,EAAcC,OAAd,EAAuB;AAEpC,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACvB,UAAM,IAAII,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAEDH,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIO,GAAG,GAAGP,OAAO,CAACO,GAAR,IAAeC,IAAI,CAACC,MAA9B;AAAA,MACIM,KAAK,GAAGf,OAAO,CAACe,KAAR,IAAiB,CAD7B;;AAGA,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,CAA3C,EAA8C;AAC5C,QAAIV,GAAG,GAAGN,GAAG,CAACO,MAAd;AAAA,QACIF,UAAU,GAAGL,GAAG,CAACa,KAAJ,EADjB;AAAA,QAEIH,MAAM,GAAG,EAFb;AAAA,QAGIO,KAHJ;;AAKA,WAAOD,KAAK,IAAIV,GAAhB,EAAqB;AACnBW,MAAAA,KAAK,GAAGR,IAAI,CAACK,KAAL,CAAWN,GAAG,KAAKF,GAAnB,CAAR;AACAI,MAAAA,MAAM,CAACQ,IAAP,CAAYb,UAAU,CAACY,KAAD,CAAtB;AACAZ,MAAAA,UAAU,CAACc,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACAX,MAAAA,GAAG,IAAI,CAAP;AACAU,MAAAA,KAAK,IAAI,CAAT;AACD;;AAED,WAAON,MAAP;AACD;;AAED,SAAOV,GAAG,CAACS,IAAI,CAACK,KAAL,CAAWN,GAAG,KAAKR,GAAG,CAACO,MAAvB,CAAD,CAAV;AACD,CA7BD;AA+BA;;;;;AAGAa,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["'use strict';\n\n/**\n * Randomize the order of the elements in a given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Boolean} [options.copy] - Sets if should return a shuffled copy of the given array. By default it's a falsy value.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Array}\n */\nfunction shuffle(arr, options) {\n\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.');\n  }\n\n  options = options || {};\n\n  var collection = arr,\n      len = arr.length,\n      rng = options.rng || Math.random,\n      random,\n      temp;\n\n  if (options.copy === true) {\n    collection = arr.slice();\n  }\n\n  while (len) {\n    random = Math.floor(rng() * len);\n    len -= 1;\n    temp = collection[len];\n    collection[len] = collection[random];\n    collection[random] = temp;\n  }\n\n  return collection;\n};\n\n/**\n * Pick one or more random elements from the given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Number} [options.picks] - Specifies how many random elements you want to pick. By default it picks 1.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Object}\n */\nshuffle.pick = function(arr, options) {\n\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle.pick() expect an array as parameter.');\n  }\n\n  options = options || {};\n\n  var rng = options.rng || Math.random,\n      picks = options.picks || 1;\n\n  if (typeof picks === 'number' && picks !== 1) {\n    var len = arr.length,\n        collection = arr.slice(),\n        random = [],\n        index;\n\n    while (picks && len) {\n      index = Math.floor(rng() * len);\n      random.push(collection[index]);\n      collection.splice(index, 1);\n      len -= 1;\n      picks -= 1;\n    }\n\n    return random;\n  }\n\n  return arr[Math.floor(rng() * arr.length)];\n};\n\n/**\n * Expose\n */\nmodule.exports = shuffle;\n"]},"metadata":{},"sourceType":"script"}