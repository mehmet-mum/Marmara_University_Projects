{"ast":null,"code":"var _jsxFileName = \"/home/mehmet/Desktop/cuckoo_hashing/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      num_of_tables: 0,\n      table_size: 0,\n      number_of_collision: 0\n    };\n\n    this.add_numbers_to_selector = (select_id, min_num, max_num) => {\n      var selector = document.getElementById(select_id);\n      selector.innerHTML = \"\";\n\n      for (min_num; min_num <= max_num; min_num++) {\n        selector.options[selector.options.length] = new Option(min_num);\n      }\n    };\n\n    this.create_tables = () => {\n      document.getElementById(\"user_inputs\").className = \"passive\";\n      document.getElementById(\"cuckoo_hashing\").className = \"active\"; // take number of tables and table size\n\n      var number_of_tables = document.getElementById(\"select_1\").value;\n      var number_of_cells = document.getElementById(\"select_2\").value;\n      this.setState({\n        num_of_tables: number_of_tables,\n        table_size: number_of_cells\n      });\n\n      for (number_of_tables; number_of_tables > 0; number_of_tables--) {\n        this.add_cells_to_tables(\"table_\" + number_of_tables, number_of_cells);\n      } // prepare indexes\n\n\n      this.add_indexes(number_of_cells);\n    };\n\n    this.add_cells_to_tables = (table_id, number_of_cells) => {\n      var table = document.getElementById(table_id);\n      table.className = \"active\";\n\n      for (number_of_cells; number_of_cells > 0; number_of_cells--) {\n        table.appendChild(document.createElement(\"p\"));\n      }\n    };\n\n    this.add_indexes = number => {\n      var indexes = document.getElementById(\"indexes\");\n      indexes.className = \"index\";\n\n      for (let i = 0; i < number; i++) {\n        var p_tag = document.createElement(\"p\");\n        p_tag.innerHTML = i;\n        indexes.appendChild(p_tag);\n      }\n    };\n\n    this.hash_function_1 = (key, table_size) => {\n      return key % table_size;\n    };\n\n    this.hash_function_2 = (key, table_size) => {\n      var value = key;\n      var sum = 0;\n\n      while (value) {\n        sum += value % 10;\n        value = Math.floor(value / 10);\n      }\n\n      return (sum * key + key) % table_size;\n    };\n\n    this.hash_function_3 = (key, table_size) => {\n      var value = key;\n      var sum = 0;\n      var i = 23;\n\n      while (value) {\n        sum += value % 10 * i;\n        value = Math.floor(value / 10);\n        i++;\n      }\n\n      return sum % table_size;\n    };\n\n    this.hash_function_4 = (key, table_size) => {\n      return key ** 2 % table_size;\n    };\n\n    this.hash_function_5 = (key, table_size) => {\n      var value = parseInt(key.toString().split('').reverse().join(''));\n      return value % table_size;\n    };\n\n    this.change_message = (message, color) => {\n      var message_tag = document.getElementById(\"message\");\n      message_tag.innerHTML = message;\n      message_tag.className = color;\n    };\n\n    this.handle_change = () => {\n      this.change_message(\"Ready for hashing :)\", \"green\");\n      this.setState({\n        number_of_collision: 0\n      });\n    };\n\n    this.handle_click = e => {\n      // get button id\n      var butt = e.target.id; // get input\n\n      var input_number = document.getElementById(\"input_number\").value; // if input is empty show error\n\n      if (input_number === \"\") {\n        this.change_message(\"Input is empty!\", \"red\");\n      } else {\n        var table_index; // perform insert operation\n\n        if (butt === \"insert\") {\n          // search input if exist or not\n          table_index = this.search(input_number); // if not exist try to insert\n\n          if (table_index === -1) {\n            this.insert(input_number, 1, 0, false, input_number, false);\n          } // if exist show error message\n          else {\n              this.change_message(\"Insertion is failed. \" + input_number + \" is already in tables!\", \"red\");\n            }\n        } // perform delete operation\n        else if (butt === \"delete\") {\n            this.delete(input_number);\n          } // perform search operation\n          else if (butt === \"search\") {\n              table_index = this.search(input_number);\n              var hash_index = this.get_key_index(input_number, table_index); // if input not found show error message\n\n              if (hash_index === -1) {\n                this.change_message(\"Search is failed. \" + input_number + \" is not found!\", \"red\");\n              } // if input found show info message\n              else {\n                  this.change_message(input_number + \" is found at index \" + hash_index + \" of table \" + table_index, \"green\");\n                }\n            }\n      }\n    };\n\n    this.text_to_ascii = text => {\n      var sum = 0;\n\n      for (let i = text.length - 1; i > -1; i--) {\n        sum = sum + text.charCodeAt(i);\n      }\n\n      return sum;\n    };\n\n    this.get_key_index = (key, table_index) => {\n      // conver input to key\n      key = this.text_to_ascii(key);\n      var hash_index = -1; //calculate index for given table\n\n      if (table_index === 1) {\n        hash_index = this.hash_function_1(key, this.state.table_size);\n      } else if (table_index === 2) {\n        hash_index = this.hash_function_2(key, this.state.table_size);\n      } else if (table_index === 3) {\n        hash_index = this.hash_function_3(key, this.state.table_size);\n      } else if (table_index === 4) {\n        hash_index = this.hash_function_4(key, this.state.table_size);\n      } else if (table_index === 5) {\n        hash_index = this.hash_function_5(key, this.state.table_size);\n      }\n\n      return hash_index;\n    };\n\n    this.rehash = last_number => {\n      var inputs = [];\n      var no_tables = parseInt(this.state.num_of_tables);\n      var no_cells = parseInt(this.state.table_size); // take elements from tables\n\n      for (let i = 0; i < no_tables; i++) {\n        var table_children = document.getElementById(\"table_\" + (i + 1)).children;\n\n        for (let j = 0; j < no_cells; j++) {\n          if (table_children[j + 2].innerHTML !== \"\") {\n            inputs.push(table_children[j + 2].innerHTML);\n            table_children[j + 2].innerHTML = \"\";\n          }\n        }\n      } // shuffle elements\n\n\n      var shuffle = require('shuffle-array'),\n          collection = inputs;\n\n      shuffle(collection);\n      inputs = collection;\n      inputs.push(last_number); // insert each element again\n\n      for (let i = 0; i < inputs.length; i++) {\n        this.insert(inputs[i], 1, 0, false, inputs[i], true);\n      }\n    };\n\n    this.insert = (key, table_index, colli, check_loop, the_inserting_number, rehashed) => {\n      // check for loop\n      if (check_loop) {\n        // if loop occured\n        if (the_inserting_number == key && table_index === 1) {\n          // if rehashing phase, then leave tables as it is\n          if (rehashed) {\n            this.change_message(\"Insertion failed. Rehashing failed\", \"red\");\n          } // if not rehashing phase, then enter the phase\n          else {\n              this.change_message(\"Insertion failed. Rehashing...\", \"red\");\n              this.rehash(key);\n            }\n\n          return;\n        }\n      } // calculate index of input for given table\n\n\n      var hash_index = this.get_key_index(key, table_index);\n      var table_children = document.getElementById(\"table_\" + table_index).children;\n      var cell_value = table_children[hash_index + 2].innerHTML; // if the cell is empty just insert\n\n      if (cell_value === \"\") {\n        if (!rehashed) {\n          this.change_message(\"Insertion is successfull!\", \"green\");\n          this.setState({\n            number_of_collision: colli\n          });\n        }\n\n        table_children[hash_index + 2].innerHTML = key;\n        table_children[0].innerHTML = \"Load Factor: \" + this.calculate_load_factor(table_index);\n      } // if not empty insert input to the table and take old value and insert old value nex table\n      else {\n          table_children[hash_index + 2].innerHTML = key;\n\n          if (table_index === parseInt(this.state.num_of_tables)) {\n            table_index = 1;\n          } else {\n            table_index++;\n          }\n\n          colli++;\n          this.insert(cell_value, table_index, colli, true, the_inserting_number, rehashed);\n        }\n    };\n\n    this.delete = key => {\n      // search input in tables\n      for (let i = 1; i <= this.state.num_of_tables; i++) {\n        var hash_index = this.get_key_index(key, i);\n        var table_children = document.getElementById(\"table_\" + i).children;\n        var cell_value = table_children[hash_index + 2].innerHTML; // if found delete it \n\n        if (cell_value === key) {\n          table_children[hash_index + 2].innerHTML = \"\";\n          table_children[0].innerHTML = \"Load Factor: \" + this.calculate_load_factor(i);\n          this.change_message(\"Deletion is successfull!\", \"green\");\n          return;\n        }\n      } // if not found show error message\n\n\n      this.change_message(\"Deletion is failed! \" + key + \" is not found!\", \"red\");\n    };\n\n    this.search = key => {\n      // search input in tables\n      for (let i = 1; i <= this.state.num_of_tables; i++) {\n        var hash_index = this.get_key_index(key, i);\n        var table_children = document.getElementById(\"table_\" + i).children;\n        var cell_value = table_children[hash_index + 2].innerHTML; // if found return index\n\n        if (cell_value === key) {\n          return i;\n        }\n      } // if not found return -1\n\n\n      return -1;\n    };\n  }\n\n  componentDidMount() {\n    // min value 2 and max value 5 for number of tables\n    this.add_numbers_to_selector(\"select_1\", 2, 5); // min value 10 and max value 30 for table size\n\n    this.add_numbers_to_selector(\"select_2\", 10, 30);\n  } // prepare tables\n\n\n  // calculate load factor for table\n  calculate_load_factor(table_index) {\n    var table_children = document.getElementById(\"table_\" + table_index).children;\n    var length = parseInt(this.state.table_size) + 2;\n    var full_cells = 0;\n\n    for (var i = 2; i < length; i++) {\n      if (table_children[i].innerHTML === \"\") {\n        full_cells++;\n      }\n    }\n\n    full_cells = length - 2 - full_cells;\n    return (Math.round(full_cells / (length - 2) * 100) / 100).toFixed(2);\n  } // get index of a input\n\n\n  // frontend part\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"user_inputs\",\n      className: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }\n    }, \"Please select number of tables and number of cells in the tables\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 13\n      }\n    }, \"Number of tables:\"), /*#__PURE__*/React.createElement(\"select\", {\n      id: \"select_1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }\n    }, \"Number of cells:\"), /*#__PURE__*/React.createElement(\"select\", {\n      id: \"select_2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Create Tables\",\n      onClick: this.create_tables,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"cuckoo_hashing\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hash_operations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 13\n      }\n    }, \"Cuckoo Hashing\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 15\n      }\n    }, \"Input: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"input_number\",\n      type: \"text\",\n      maxLength: \"20\",\n      onChange: this.handle_change,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"insert\",\n      className: \"button\",\n      type: \"submit\",\n      value: \"Insert\",\n      onClick: this.handle_click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"delete\",\n      className: \"button\",\n      type: \"submit\",\n      value: \"Delete\",\n      onClick: this.handle_click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"search\",\n      className: \"button\",\n      type: \"submit\",\n      value: \"Search\",\n      onClick: this.handle_click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"message\",\n      className: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, \"Ready for hashing :)\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"tables\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"indexes\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 15\n      }\n    }, \"Collisions: \", this.state.number_of_collision), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 15\n      }\n    }, \"indexes\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"table_1\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 15\n      }\n    }, \"Load Factor: 0.00\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 15\n      }\n    }, \"Table 1\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"table_2\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 15\n      }\n    }, \"Load Factor: 0.00\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 15\n      }\n    }, \"Table 2\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"table_3\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 15\n      }\n    }, \"Load Factor: 0.00\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 15\n      }\n    }, \"Table 3\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"table_4\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 15\n      }\n    }, \"Load Factor: 0.00\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 15\n      }\n    }, \"Table 4\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"table_5\",\n      className: \"passive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 15\n      }\n    }, \"Load Factor: 0.00\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 15\n      }\n    }, \"Table 5\")))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mehmet/Desktop/cuckoo_hashing/src/App.js"],"names":["React","Component","App","state","num_of_tables","table_size","number_of_collision","add_numbers_to_selector","select_id","min_num","max_num","selector","document","getElementById","innerHTML","options","length","Option","create_tables","className","number_of_tables","value","number_of_cells","setState","add_cells_to_tables","add_indexes","table_id","table","appendChild","createElement","number","indexes","i","p_tag","hash_function_1","key","hash_function_2","sum","Math","floor","hash_function_3","hash_function_4","hash_function_5","parseInt","toString","split","reverse","join","change_message","message","color","message_tag","handle_change","handle_click","e","butt","target","id","input_number","table_index","search","insert","delete","hash_index","get_key_index","text_to_ascii","text","charCodeAt","rehash","last_number","inputs","no_tables","no_cells","table_children","children","j","push","shuffle","require","collection","colli","check_loop","the_inserting_number","rehashed","cell_value","calculate_load_factor","componentDidMount","full_cells","round","toFixed","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AACNC,MAAAA,aAAa,EAAE,CADT;AAENC,MAAAA,UAAU,EAAE,CAFN;AAGNC,MAAAA,mBAAmB,EAAE;AAHf,KADkB;;AAAA,SAS1BC,uBAT0B,GASA,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,OAArB,KAAgC;AACxD,UAAIC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwBL,SAAxB,CAAf;AACAG,MAAAA,QAAQ,CAACG,SAAT,GAAqB,EAArB;;AAEA,WAAKL,OAAL,EAAcA,OAAO,IAAEC,OAAvB,EAAgCD,OAAO,EAAvC,EAA0C;AACxCE,QAAAA,QAAQ,CAACI,OAAT,CAAiBJ,QAAQ,CAACI,OAAT,CAAiBC,MAAlC,IAA4C,IAAIC,MAAJ,CAAWR,OAAX,CAA5C;AACD;AACF,KAhByB;;AAAA,SAoB1BS,aApB0B,GAoBV,MAAK;AACnBN,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCM,SAAvC,GAAmD,SAAnD;AACAP,MAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CM,SAA1C,GAAsD,QAAtD,CAFmB,CAInB;;AACA,UAAIC,gBAAgB,GAAGR,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCQ,KAA3D;AACA,UAAIC,eAAe,GAAGV,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCQ,KAA1D;AAEA,WAAKE,QAAL,CACE;AACEnB,QAAAA,aAAa,EAAEgB,gBADjB;AAEEf,QAAAA,UAAU,EAAEiB;AAFd,OADF;;AAOA,WAAIF,gBAAJ,EAAsBA,gBAAgB,GAAC,CAAvC,EAA0CA,gBAAgB,EAA1D,EAA6D;AAC3D,aAAKI,mBAAL,CAAyB,WAAWJ,gBAApC,EAAsDE,eAAtD;AACD,OAjBkB,CAmBnB;;;AACA,WAAKG,WAAL,CAAiBH,eAAjB;AAED,KA1CyB;;AAAA,SAsD1BE,mBAtD0B,GAsDJ,CAACE,QAAD,EAAWJ,eAAX,KAA8B;AAClD,UAAIK,KAAK,GAAGf,QAAQ,CAACC,cAAT,CAAwBa,QAAxB,CAAZ;AACAC,MAAAA,KAAK,CAACR,SAAN,GAAkB,QAAlB;;AACA,WAAKG,eAAL,EAAsBA,eAAe,GAAG,CAAxC,EAA2CA,eAAe,EAA1D,EAA6D;AAC3DK,QAAAA,KAAK,CAACC,WAAN,CAAkBhB,QAAQ,CAACiB,aAAT,CAAuB,GAAvB,CAAlB;AACD;AACF,KA5DyB;;AAAA,SA+D1BJ,WA/D0B,GA+DXK,MAAD,IAAW;AACvB,UAAIC,OAAO,GAAGnB,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;AACAkB,MAAAA,OAAO,CAACZ,SAAR,GAAoB,OAApB;;AACA,WAAI,IAAIa,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAnB,EAA2BE,CAAC,EAA5B,EAA+B;AAC7B,YAAIC,KAAK,GAAGrB,QAAQ,CAACiB,aAAT,CAAuB,GAAvB,CAAZ;AACAI,QAAAA,KAAK,CAACnB,SAAN,GAAkBkB,CAAlB;AACAD,QAAAA,OAAO,CAACH,WAAR,CAAoBK,KAApB;AACD;AACF,KAvEyB;;AAAA,SA0E1BC,eA1E0B,GA0ER,CAACC,GAAD,EAAM9B,UAAN,KAAoB;AACpC,aAAO8B,GAAG,GAAG9B,UAAb;AACD,KA5EyB;;AAAA,SA+E1B+B,eA/E0B,GA+ER,CAACD,GAAD,EAAM9B,UAAN,KAAoB;AACpC,UAAIgB,KAAK,GAAGc,GAAZ;AACA,UAAIE,GAAG,GAAG,CAAV;;AACA,aAAOhB,KAAP,EAAc;AACZgB,QAAAA,GAAG,IAAIhB,KAAK,GAAG,EAAf;AACAA,QAAAA,KAAK,GAAGiB,IAAI,CAACC,KAAL,CAAWlB,KAAK,GAAG,EAAnB,CAAR;AACD;;AACD,aAAO,CAAEgB,GAAG,GAAGF,GAAP,GAAcA,GAAf,IAAsB9B,UAA7B;AACD,KAvFyB;;AAAA,SA0F1BmC,eA1F0B,GA0FR,CAACL,GAAD,EAAM9B,UAAN,KAAoB;AACpC,UAAIgB,KAAK,GAAGc,GAAZ;AACA,UAAIE,GAAG,GAAG,CAAV;AACA,UAAIL,CAAC,GAAG,EAAR;;AACA,aAAOX,KAAP,EAAc;AACZgB,QAAAA,GAAG,IAAKhB,KAAK,GAAG,EAAT,GAAeW,CAAtB;AACAX,QAAAA,KAAK,GAAGiB,IAAI,CAACC,KAAL,CAAWlB,KAAK,GAAG,EAAnB,CAAR;AACAW,QAAAA,CAAC;AACF;;AACD,aAAQK,GAAD,GAAQhC,UAAf;AACD,KApGyB;;AAAA,SAuG1BoC,eAvG0B,GAuGR,CAACN,GAAD,EAAM9B,UAAN,KAAoB;AACpC,aAAQ8B,GAAG,IAAI,CAAR,GAAa9B,UAApB;AACD,KAzGyB;;AAAA,SA4G1BqC,eA5G0B,GA4GR,CAACP,GAAD,EAAM9B,UAAN,KAAoB;AACpC,UAAIgB,KAAK,GAAGsB,QAAQ,CAACR,GAAG,CAACS,QAAJ,GAAeC,KAAf,CAAqB,EAArB,EAAyBC,OAAzB,GAAmCC,IAAnC,CAAwC,EAAxC,CAAD,CAApB;AACA,aAAO1B,KAAK,GAAGhB,UAAf;AACD,KA/GyB;;AAAA,SAkH1B2C,cAlH0B,GAkHT,CAACC,OAAD,EAAUC,KAAV,KAAmB;AAClC,UAAIC,WAAW,GAAGvC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAlB;AACAsC,MAAAA,WAAW,CAACrC,SAAZ,GAAwBmC,OAAxB;AACAE,MAAAA,WAAW,CAAChC,SAAZ,GAAwB+B,KAAxB;AACD,KAtHyB;;AAAA,SAyH1BE,aAzH0B,GAyHV,MAAK;AACnB,WAAKJ,cAAL,CAAoB,sBAApB,EAA4C,OAA5C;AACA,WAAKzB,QAAL,CAAc;AACZjB,QAAAA,mBAAmB,EAAE;AADT,OAAd;AAGD,KA9HyB;;AAAA,SAiI1B+C,YAjI0B,GAiIVC,CAAD,IAAM;AACnB;AACA,UAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,EAApB,CAFmB,CAGnB;;AACA,UAAIC,YAAY,GAAG9C,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCQ,KAA3D,CAJmB,CAMnB;;AACA,UAAGqC,YAAY,KAAK,EAApB,EAAuB;AACrB,aAAKV,cAAL,CAAoB,iBAApB,EAAuC,KAAvC;AACD,OAFD,MAGI;AACF,YAAIW,WAAJ,CADE,CAGF;;AACA,YAAIJ,IAAI,KAAK,QAAb,EAAsB;AACpB;AACAI,UAAAA,WAAW,GAAG,KAAKC,MAAL,CAAYF,YAAZ,CAAd,CAFoB,CAIpB;;AACA,cAAKC,WAAW,KAAK,CAAC,CAAtB,EAAwB;AAEtB,iBAAKE,MAAL,CAAYH,YAAZ,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,KAAhC,EAAuCA,YAAvC,EAAqD,KAArD;AACD,WAHD,CAKA;AALA,eAMI;AACF,mBAAKV,cAAL,CAAoB,0BAA0BU,YAA1B,GAAyC,wBAA7D,EAAuF,KAAvF;AACD;AACF,SAdD,CAgBA;AAhBA,aAiBK,IAAIH,IAAI,KAAK,QAAb,EAAsB;AACzB,iBAAKO,MAAL,CAAYJ,YAAZ;AACD,WAFI,CAIL;AAJK,eAKA,IAAIH,IAAI,KAAK,QAAb,EAAsB;AACzBI,cAAAA,WAAW,GAAG,KAAKC,MAAL,CAAYF,YAAZ,CAAd;AACA,kBAAIK,UAAU,GAAG,KAAKC,aAAL,CAAmBN,YAAnB,EAAiCC,WAAjC,CAAjB,CAFyB,CAIzB;;AACA,kBAAGI,UAAU,KAAK,CAAC,CAAnB,EAAqB;AACnB,qBAAKf,cAAL,CAAoB,uBAAuBU,YAAvB,GAAsC,gBAA1D,EAA4E,KAA5E;AACD,eAFD,CAIA;AAJA,mBAKI;AACF,uBAAKV,cAAL,CAAoBU,YAAY,GAAG,qBAAf,GAAuCK,UAAvC,GAAoD,YAApD,GAAoEJ,WAAxF,EAAsG,OAAtG;AACD;AACF;AACF;AACF,KApLyB;;AAAA,SAuL1BM,aAvL0B,GAuLTC,IAAD,IAAS;AACvB,UAAI7B,GAAG,GAAG,CAAV;;AACA,WAAI,IAAIL,CAAC,GAAGkC,IAAI,CAAClD,MAAL,GAAc,CAA1B,EAA6BgB,CAAC,GAAC,CAAC,CAAhC,EAAoCA,CAAC,EAArC,EAAwC;AACtCK,QAAAA,GAAG,GAAGA,GAAG,GAAG6B,IAAI,CAACC,UAAL,CAAgBnC,CAAhB,CAAZ;AACD;;AAED,aAAOK,GAAP;AACD,KA9LyB;;AAAA,SAkN1B2B,aAlN0B,GAkNV,CAAC7B,GAAD,EAAMwB,WAAN,KAAqB;AAEnC;AACAxB,MAAAA,GAAG,GAAG,KAAK8B,aAAL,CAAmB9B,GAAnB,CAAN;AAEA,UAAI4B,UAAU,GAAG,CAAC,CAAlB,CALmC,CAOnC;;AACA,UAAGJ,WAAW,KAAK,CAAnB,EAAqB;AACnBI,QAAAA,UAAU,GAAG,KAAK7B,eAAL,CAAqBC,GAArB,EAA0B,KAAKhC,KAAL,CAAWE,UAArC,CAAb;AACD,OAFD,MAGK,IAAGsD,WAAW,KAAK,CAAnB,EAAqB;AACxBI,QAAAA,UAAU,GAAG,KAAK3B,eAAL,CAAqBD,GAArB,EAA0B,KAAKhC,KAAL,CAAWE,UAArC,CAAb;AACD,OAFI,MAGA,IAAGsD,WAAW,KAAK,CAAnB,EAAqB;AACxBI,QAAAA,UAAU,GAAG,KAAKvB,eAAL,CAAqBL,GAArB,EAA0B,KAAKhC,KAAL,CAAWE,UAArC,CAAb;AACD,OAFI,MAGA,IAAGsD,WAAW,KAAK,CAAnB,EAAqB;AACxBI,QAAAA,UAAU,GAAG,KAAKtB,eAAL,CAAqBN,GAArB,EAA0B,KAAKhC,KAAL,CAAWE,UAArC,CAAb;AACD,OAFI,MAGA,IAAGsD,WAAW,KAAK,CAAnB,EAAqB;AACxBI,QAAAA,UAAU,GAAG,KAAKrB,eAAL,CAAqBP,GAArB,EAA0B,KAAKhC,KAAL,CAAWE,UAArC,CAAb;AACD;;AAED,aAAO0D,UAAP;AACD,KA3OyB;;AAAA,SA8O1BK,MA9O0B,GA8OhBC,WAAD,IAAiB;AACxB,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,SAAS,GAAG5B,QAAQ,CAAC,KAAKxC,KAAL,CAAWC,aAAZ,CAAxB;AACA,UAAIoE,QAAQ,GAAG7B,QAAQ,CAAC,KAAKxC,KAAL,CAAWE,UAAZ,CAAvB,CAHwB,CAKxB;;AACA,WAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,SAApB,EAA+BvC,CAAC,EAAhC,EAAmC;AACjC,YAAIyC,cAAc,GAAG7D,QAAQ,CAACC,cAAT,CAAwB,YAAYmB,CAAC,GAAC,CAAd,CAAxB,EAA0C0C,QAA/D;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAApB,EAA8BG,CAAC,EAA/B,EAAkC;AAChC,cAAGF,cAAc,CAACE,CAAC,GAAC,CAAH,CAAd,CAAoB7D,SAApB,KAAkC,EAArC,EAAwC;AACtCwD,YAAAA,MAAM,CAACM,IAAP,CAAYH,cAAc,CAACE,CAAC,GAAC,CAAH,CAAd,CAAoB7D,SAAhC;AACA2D,YAAAA,cAAc,CAACE,CAAC,GAAC,CAAH,CAAd,CAAoB7D,SAApB,GAAgC,EAAhC;AACD;AACF;AACF,OAduB,CAgBxB;;;AACA,UAAI+D,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;AAAA,UAAuCC,UAAU,GAAGT,MAApD;;AAEAO,MAAAA,OAAO,CAACE,UAAD,CAAP;AACAT,MAAAA,MAAM,GAAGS,UAAT;AACAT,MAAAA,MAAM,CAACM,IAAP,CAAYP,WAAZ,EArBwB,CAuBxB;;AACA,WAAM,IAAIrC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAACsC,MAAM,CAACtD,MAA1B,EAAkCgB,CAAC,EAAnC,EAAsC;AACpC,aAAK6B,MAAL,CAAYS,MAAM,CAACtC,CAAD,CAAlB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAA7B,EAAoCsC,MAAM,CAACtC,CAAD,CAA1C,EAA+C,IAA/C;AACD;AACF,KAzQyB;;AAAA,SA6Q1B6B,MA7Q0B,GA6QjB,CAAC1B,GAAD,EAAMwB,WAAN,EAAmBqB,KAAnB,EAA0BC,UAA1B,EAAsCC,oBAAtC,EAA4DC,QAA5D,KAAwE;AAG/E;AACA,UAAIF,UAAJ,EAAgB;AAEd;AACA,YAAGC,oBAAoB,IAAI/C,GAAxB,IAA+BwB,WAAW,KAAK,CAAlD,EAAoD;AAElD;AACA,cAAIwB,QAAJ,EAAc;AACZ,iBAAKnC,cAAL,CAAoB,oCAApB,EAA0D,KAA1D;AACD,WAFD,CAIA;AAJA,eAKI;AACF,mBAAKA,cAAL,CAAoB,gCAApB,EAAsD,KAAtD;AACA,mBAAKoB,MAAL,CAAYjC,GAAZ;AACD;;AACD;AACD;AACF,OArB8E,CAuB/E;;;AACA,UAAI4B,UAAU,GAAG,KAAKC,aAAL,CAAmB7B,GAAnB,EAAwBwB,WAAxB,CAAjB;AAEA,UAAIc,cAAc,GAAG7D,QAAQ,CAACC,cAAT,CAAwB,WAAW8C,WAAnC,EAAgDe,QAArE;AACA,UAAIU,UAAU,GAAGX,cAAc,CAACV,UAAU,GAAG,CAAd,CAAd,CAA+BjD,SAAhD,CA3B+E,CA6B/E;;AACA,UAAGsE,UAAU,KAAK,EAAlB,EAAqB;AACnB,YAAG,CAACD,QAAJ,EAAa;AACX,eAAKnC,cAAL,CAAoB,2BAApB,EAAiD,OAAjD;AACA,eAAKzB,QAAL,CAAc;AACZjB,YAAAA,mBAAmB,EAAE0E;AADT,WAAd;AAGD;;AAEDP,QAAAA,cAAc,CAACV,UAAU,GAAG,CAAd,CAAd,CAA+BjD,SAA/B,GAA2CqB,GAA3C;AACAsC,QAAAA,cAAc,CAAC,CAAD,CAAd,CAAkB3D,SAAlB,GAA8B,kBAAkB,KAAKuE,qBAAL,CAA2B1B,WAA3B,CAAhD;AACD,OAVD,CAYA;AAZA,WAaI;AACFc,UAAAA,cAAc,CAACV,UAAU,GAAG,CAAd,CAAd,CAA+BjD,SAA/B,GAA2CqB,GAA3C;;AAEA,cAAGwB,WAAW,KAAKhB,QAAQ,CAAC,KAAKxC,KAAL,CAAWC,aAAZ,CAA3B,EAAsD;AACpDuD,YAAAA,WAAW,GAAG,CAAd;AACD,WAFD,MAGI;AACFA,YAAAA,WAAW;AACZ;;AAEDqB,UAAAA,KAAK;AACL,eAAKnB,MAAL,CAAYuB,UAAZ,EAAwBzB,WAAxB,EAAqCqB,KAArC,EAA4C,IAA5C,EAAkDE,oBAAlD,EAAwEC,QAAxE;AACD;AACF,KArUyB;;AAAA,SAwU1BrB,MAxU0B,GAwUhB3B,GAAD,IAAQ;AAEf;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK7B,KAAL,CAAWC,aAAhC,EAA+C4B,CAAC,EAAhD,EAAmD;AACjD,YAAI+B,UAAU,GAAG,KAAKC,aAAL,CAAmB7B,GAAnB,EAAwBH,CAAxB,CAAjB;AAEA,YAAIyC,cAAc,GAAG7D,QAAQ,CAACC,cAAT,CAAwB,WAAWmB,CAAnC,EAAsC0C,QAA3D;AACA,YAAIU,UAAU,GAAGX,cAAc,CAACV,UAAU,GAAG,CAAd,CAAd,CAA+BjD,SAAhD,CAJiD,CAMjD;;AACA,YAAIsE,UAAU,KAAKjD,GAAnB,EAAuB;AAErBsC,UAAAA,cAAc,CAACV,UAAU,GAAG,CAAd,CAAd,CAA+BjD,SAA/B,GAA2C,EAA3C;AACA2D,UAAAA,cAAc,CAAC,CAAD,CAAd,CAAkB3D,SAAlB,GAA8B,kBAAkB,KAAKuE,qBAAL,CAA2BrD,CAA3B,CAAhD;AACA,eAAKgB,cAAL,CAAoB,0BAApB,EAAgD,OAAhD;AACA;AACD;AAEF,OAlBc,CAmBf;;;AACA,WAAKA,cAAL,CAAoB,yBAAyBb,GAAzB,GAA+B,gBAAnD,EAAqE,KAArE;AACD,KA7VyB;;AAAA,SAiW1ByB,MAjW0B,GAiWhBzB,GAAD,IAAQ;AACf;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK7B,KAAL,CAAWC,aAAhC,EAA+C4B,CAAC,EAAhD,EAAmD;AACjD,YAAI+B,UAAU,GAAG,KAAKC,aAAL,CAAmB7B,GAAnB,EAAwBH,CAAxB,CAAjB;AACA,YAAIyC,cAAc,GAAG7D,QAAQ,CAACC,cAAT,CAAwB,WAAWmB,CAAnC,EAAsC0C,QAA3D;AACA,YAAIU,UAAU,GAAGX,cAAc,CAACV,UAAU,GAAG,CAAd,CAAd,CAA+BjD,SAAhD,CAHiD,CAKjD;;AACA,YAAIsE,UAAU,KAAKjD,GAAnB,EAAuB;AACrB,iBAAOH,CAAP;AACD;AAEF,OAZc,CAaf;;;AACA,aAAO,CAAC,CAAR;AAED,KAjXyB;AAAA;;AA4C1BsD,EAAAA,iBAAiB,GAAE;AAEjB;AACA,SAAK/E,uBAAL,CAA6B,UAA7B,EAAyC,CAAzC,EAA4C,CAA5C,EAHiB,CAKjB;;AACA,SAAKA,uBAAL,CAA6B,UAA7B,EAAyC,EAAzC,EAA6C,EAA7C;AACD,GAnDyB,CAqD1B;;;AA2IA;AACA8E,EAAAA,qBAAqB,CAAC1B,WAAD,EAAa;AAEhC,QAAIc,cAAc,GAAG7D,QAAQ,CAACC,cAAT,CAAwB,WAAW8C,WAAnC,EAAgDe,QAArE;AACA,QAAI1D,MAAM,GAAG2B,QAAQ,CAAC,KAAKxC,KAAL,CAAWE,UAAZ,CAAR,GAAkC,CAA/C;AACA,QAAIkF,UAAU,GAAG,CAAjB;;AAEA,SAAM,IAAIvD,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGhB,MAArB,EAA6BgB,CAAC,EAA9B,EAAiC;AAC/B,UAAIyC,cAAc,CAACzC,CAAD,CAAd,CAAkBlB,SAAlB,KAAgC,EAApC,EAAuC;AACrCyE,QAAAA,UAAU;AACX;AACF;;AACDA,IAAAA,UAAU,GAAGvE,MAAM,GAAG,CAAT,GAAauE,UAA1B;AAEA,WAAO,CAACjD,IAAI,CAACkD,KAAL,CAAYD,UAAU,IAAIvE,MAAM,GAAC,CAAX,CAAX,GAA4B,GAAvC,IAA8C,GAA/C,EAAoDyE,OAApD,CAA4D,CAA5D,CAAP;AACD,GA/MyB,CAiN1B;;;AAmKA;AACAC,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,aAAR;AAAsB,MAAA,SAAS,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAQ,MAAA,EAAE,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAQ,MAAA,EAAE,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAPF,eAWE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,eAA3B;AAA2C,MAAA,OAAO,EAAE,KAAKxE,aAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF,eAeE;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAyB,MAAA,SAAS,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAO,MAAA,EAAE,EAAC,cAAV;AAAyB,MAAA,IAAI,EAAC,MAA9B;AAAqC,MAAA,SAAS,EAAC,IAA/C;AAAoD,MAAA,QAAQ,EAAE,KAAKkC,aAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,eAME;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,SAAS,EAAC,QAA7B;AAAsC,MAAA,IAAI,EAAC,QAA3C;AAAoD,MAAA,KAAK,EAAC,QAA1D;AAAmE,MAAA,OAAO,EAAE,KAAKC,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAOE;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,SAAS,EAAC,QAA7B;AAAsC,MAAA,IAAI,EAAC,QAA3C;AAAoD,MAAA,KAAK,EAAC,QAA1D;AAAmE,MAAA,OAAO,EAAE,KAAKA,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,eAQE;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,SAAS,EAAC,QAA7B;AAAsC,MAAA,IAAI,EAAC,QAA3C;AAAoD,MAAA,KAAK,EAAC,QAA1D;AAAmE,MAAA,OAAO,EAAE,KAAKA,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,eASE;AAAI,MAAA,EAAE,EAAC,SAAP;AAAiB,MAAA,SAAS,EAAC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BATF,CADF,eAYE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiB,KAAKlD,KAAL,CAAWG,mBAA5B,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADF,eAKE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CALF,eASE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CATF,eAaE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CAbF,eAiBE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CAjBF,eAqBE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CArBF,CAZF,CAfF,CADF;AAyDD;;AA/ayB;;AAkb5B,eAAeJ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    num_of_tables: 0,\n    table_size: 0,\n    number_of_collision: 0\n  }\n\n\n  // prepare select tags  for number of cells and number of tables\n  add_numbers_to_selector = (select_id, min_num, max_num) =>{\n    var selector = document.getElementById(select_id);\n    selector.innerHTML = \"\";\n\n    for( min_num; min_num<=max_num; min_num++){\n      selector.options[selector.options.length] = new Option(min_num);\n    }\n  }\n\n\n  // create tables\n  create_tables = () =>{\n    document.getElementById(\"user_inputs\").className = \"passive\";\n    document.getElementById(\"cuckoo_hashing\").className = \"active\"\n\n    // take number of tables and table size\n    var number_of_tables = document.getElementById(\"select_1\").value;\n    var number_of_cells = document.getElementById(\"select_2\").value;\n\n    this.setState(\n      {\n        num_of_tables: number_of_tables,\n        table_size: number_of_cells\n      }\n    )\n\n    for(number_of_tables; number_of_tables>0; number_of_tables--){\n      this.add_cells_to_tables(\"table_\" + number_of_tables, number_of_cells);\n    }\n\n    // prepare indexes\n    this.add_indexes(number_of_cells);\n\n  }\n  \n  componentDidMount(){\n\n    // min value 2 and max value 5 for number of tables\n    this.add_numbers_to_selector(\"select_1\", 2, 5);\n\n    // min value 10 and max value 30 for table size\n    this.add_numbers_to_selector(\"select_2\", 10, 30);\n  }\n\n  // prepare tables\n  add_cells_to_tables = (table_id, number_of_cells) =>{\n    var table = document.getElementById(table_id);\n    table.className = \"active\";\n    for( number_of_cells; number_of_cells > 0; number_of_cells--){\n      table.appendChild(document.createElement(\"p\"));\n    }\n  }\n\n  // prepare indexes\n  add_indexes = (number) =>{\n    var indexes = document.getElementById(\"indexes\");\n    indexes.className = \"index\";\n    for(let i = 0; i < number; i++){\n      var p_tag = document.createElement(\"p\");\n      p_tag.innerHTML = i;\n      indexes.appendChild(p_tag);\n    }\n  }\n  \n  // hash function 1 for table 1\n  hash_function_1 = (key, table_size) =>{\n    return key % table_size\n  }\n\n  // hash function 2 for table 2\n  hash_function_2 = (key, table_size) =>{\n    var value = key;\n    var sum = 0;\n    while (value) {\n      sum += value % 10;\n      value = Math.floor(value / 10);\n    }\n    return ((sum * key) + key) % table_size\n  }\n\n  // hash function 3 for table 3\n  hash_function_3 = (key, table_size) =>{\n    var value = key;\n    var sum = 0;\n    var i = 23;\n    while (value) {\n      sum += (value % 10) * i;\n      value = Math.floor(value / 10);\n      i++;\n    }\n    return (sum) % table_size\n  }\n\n  // hash function 4 for table 4\n  hash_function_4 = (key, table_size) =>{\n    return (key ** 2) % table_size\n  }\n\n  // hash function 5 for table 5\n  hash_function_5 = (key, table_size) =>{\n    var value = parseInt(key.toString().split('').reverse().join(''));\n    return value % table_size\n  }\n\n  // change info message\n  change_message = (message, color) =>{\n    var message_tag = document.getElementById(\"message\");\n    message_tag.innerHTML = message;\n    message_tag.className = color;\n  }\n\n  // clear info message and collision number after changing input text\n  handle_change = () =>{\n    this.change_message(\"Ready for hashing :)\", \"green\");\n    this.setState({\n      number_of_collision: 0\n    })\n  }\n\n  // handle button click\n  handle_click = (e) =>{\n    // get button id\n    var butt = e.target.id;\n    // get input\n    var input_number = document.getElementById(\"input_number\").value;\n\n    // if input is empty show error\n    if(input_number === \"\"){\n      this.change_message(\"Input is empty!\", \"red\");\n    }\n    else{\n      var table_index;\n\n      // perform insert operation\n      if (butt === \"insert\"){\n        // search input if exist or not\n        table_index = this.search(input_number);\n        \n        // if not exist try to insert\n        if ( table_index === -1){\n          \n          this.insert(input_number, 1, 0, false, input_number, false);\n        }\n\n        // if exist show error message\n        else{\n          this.change_message(\"Insertion is failed. \" + input_number + \" is already in tables!\", \"red\");\n        }\n      }\n\n      // perform delete operation\n      else if (butt === \"delete\"){\n        this.delete(input_number);\n      }\n\n      // perform search operation\n      else if (butt === \"search\"){\n        table_index = this.search(input_number);\n        var hash_index = this.get_key_index(input_number, table_index);\n\n        // if input not found show error message\n        if(hash_index === -1){\n          this.change_message(\"Search is failed. \" + input_number + \" is not found!\", \"red\");\n        }\n\n        // if input found show info message\n        else{\n          this.change_message(input_number + \" is found at index \" + hash_index + \" of table \" + (table_index), \"green\");\n        }\n      }\n    }\n  }\n\n  // convert text to sum of ascii codes of each char \n  text_to_ascii = (text) =>{\n    var sum = 0;\n    for(let i = text.length - 1; i>-1 ; i--){\n      sum = sum + text.charCodeAt(i);\n    }\n\n    return sum;\n  }\n\n  // calculate load factor for table\n  calculate_load_factor(table_index){\n    \n    var table_children = document.getElementById(\"table_\" + table_index).children;\n    var length = parseInt(this.state.table_size) + 2;\n    var full_cells = 0;\n    \n    for ( var i = 2; i < length; i++){\n      if( table_children[i].innerHTML === \"\"){\n        full_cells++;\n      }\n    }\n    full_cells = length - 2 - full_cells;\n    \n    return (Math.round((full_cells / (length-2)) * 100) / 100).toFixed(2);\n  }\n\n  // get index of a input\n  get_key_index = (key, table_index) =>{\n\n    // conver input to key\n    key = this.text_to_ascii(key);\n\n    var hash_index = -1;\n\n    //calculate index for given table\n    if(table_index === 1){\n      hash_index = this.hash_function_1(key, this.state.table_size);\n    }\n    else if(table_index === 2){\n      hash_index = this.hash_function_2(key, this.state.table_size);\n    }\n    else if(table_index === 3){\n      hash_index = this.hash_function_3(key, this.state.table_size);\n    }\n    else if(table_index === 4){\n      hash_index = this.hash_function_4(key, this.state.table_size);\n    }\n    else if(table_index === 5){\n      hash_index = this.hash_function_5(key, this.state.table_size);\n    }\n\n    return hash_index\n  }\n\n  // rehash cuckoo hashing\n  rehash = (last_number) => {\n    var inputs = [];\n    var no_tables = parseInt(this.state.num_of_tables);\n    var no_cells = parseInt(this.state.table_size);\n\n    // take elements from tables\n    for( let i = 0; i < no_tables; i++){\n      var table_children = document.getElementById(\"table_\" + (i+1)).children;\n      for( let j = 0; j < no_cells; j++){\n        if(table_children[j+2].innerHTML !== \"\"){\n          inputs.push(table_children[j+2].innerHTML);\n          table_children[j+2].innerHTML = \"\";\n        }\n      }\n    }\n\n    // shuffle elements\n    var shuffle = require('shuffle-array'),collection = inputs;\n \n    shuffle(collection);\n    inputs = collection;\n    inputs.push(last_number);\n\n    // insert each element again\n    for ( let i = 0; i<inputs.length; i++){\n      this.insert(inputs[i], 1, 0, false, inputs[i], true);\n    }\n  }\n  \n\n  // insert operation\n  insert = (key, table_index, colli, check_loop, the_inserting_number, rehashed) =>{\n\n\n    // check for loop\n    if( check_loop ){\n\n      // if loop occured\n      if(the_inserting_number == key && table_index === 1){\n\n        // if rehashing phase, then leave tables as it is\n        if( rehashed ){\n          this.change_message(\"Insertion failed. Rehashing failed\", \"red\");\n        }\n\n        // if not rehashing phase, then enter the phase\n        else{\n          this.change_message(\"Insertion failed. Rehashing...\", \"red\");\n          this.rehash(key);\n        }\n        return;\n      }\n    }\n\n    // calculate index of input for given table\n    var hash_index = this.get_key_index(key, table_index);\n    \n    var table_children = document.getElementById(\"table_\" + table_index).children;\n    var cell_value = table_children[hash_index + 2].innerHTML;\n\n    // if the cell is empty just insert\n    if(cell_value === \"\"){\n      if(!rehashed){\n        this.change_message(\"Insertion is successfull!\" ,\"green\");\n        this.setState({\n          number_of_collision: colli\n        });\n      }\n      \n      table_children[hash_index + 2].innerHTML = key;\n      table_children[0].innerHTML = \"Load Factor: \" + this.calculate_load_factor(table_index);\n    }\n\n    // if not empty insert input to the table and take old value and insert old value nex table\n    else{\n      table_children[hash_index + 2].innerHTML = key;\n      \n      if(table_index === parseInt(this.state.num_of_tables)){\n        table_index = 1;\n      }\n      else{\n        table_index++;\n      }\n\n      colli++;\n      this.insert(cell_value, table_index, colli, true, the_inserting_number, rehashed);\n    }\n  }\n\n  // delete operation\n  delete = (key) =>{\n\n    // search input in tables\n    for( let i = 1; i <= this.state.num_of_tables; i++){\n      var hash_index = this.get_key_index(key, i);\n\n      var table_children = document.getElementById(\"table_\" + i).children;\n      var cell_value = table_children[hash_index + 2].innerHTML;\n\n      // if found delete it \n      if( cell_value === key){\n\n        table_children[hash_index + 2].innerHTML = \"\";\n        table_children[0].innerHTML = \"Load Factor: \" + this.calculate_load_factor(i);\n        this.change_message(\"Deletion is successfull!\", \"green\");\n        return;\n      }\n\n    }\n    // if not found show error message\n    this.change_message(\"Deletion is failed! \" + key + \" is not found!\", \"red\");\n  }\n\n\n  // search operation\n  search = (key) =>{\n    // search input in tables\n    for( let i = 1; i <= this.state.num_of_tables; i++){\n      var hash_index = this.get_key_index(key, i);\n      var table_children = document.getElementById(\"table_\" + i).children;\n      var cell_value = table_children[hash_index + 2].innerHTML;\n\n      // if found return index\n      if( cell_value === key){\n        return i;\n      }\n\n    }\n    // if not found return -1\n    return -1;\n    \n  }\n  \n\n  // frontend part\n  render(){\n    return(\n      <div>\n        <div id=\"user_inputs\" className=\"active\">\n          <h2>Please select number of tables and number of cells in the tables</h2>\n          <div>\n            <p>Number of tables:</p>\n            <select id=\"select_1\"></select>\n          </div>\n          \n          <div>\n            <p>Number of cells:</p>\n            <select id=\"select_2\"></select>\n          </div>\n          <input type=\"submit\" value=\"Create Tables\" onClick={this.create_tables}></input>\n        </div>\n\n        <div id=\"cuckoo_hashing\" className=\"passive\">\n          <div id=\"hash_operations\">\n            <h1>Cuckoo Hashing</h1>\n            <div>\n              <p>Input: </p>\n              <input id=\"input_number\" type=\"text\" maxLength=\"20\" onChange={this.handle_change}></input>\n            </div>\n            <input id=\"insert\" className=\"button\" type=\"submit\" value=\"Insert\" onClick={this.handle_click}></input>\n            <input id=\"delete\" className=\"button\" type=\"submit\" value=\"Delete\" onClick={this.handle_click}></input>\n            <input id=\"search\" className=\"button\" type=\"submit\" value=\"Search\" onClick={this.handle_click}></input>\n            <h2 id=\"message\" className=\"green\">Ready for hashing :)</h2>\n          </div>\n          <div id=\"tables\">\n            <div id=\"indexes\" className=\"passive\">\n              <h4>Collisions: {this.state.number_of_collision}</h4>\n              <h3>indexes</h3>\n            </div>\n            <div id=\"table_1\" className=\"passive\">\n              <h4>Load Factor: 0.00</h4>\n              <h3>Table 1</h3>\n            </div>\n            <div id=\"table_2\" className=\"passive\">\n              <h4>Load Factor: 0.00</h4>\n              <h3>Table 2</h3>\n            </div>\n            <div id=\"table_3\" className=\"passive\">\n              <h4>Load Factor: 0.00</h4>\n              <h3>Table 3</h3>\n            </div>\n            <div id=\"table_4\" className=\"passive\">\n              <h4>Load Factor: 0.00</h4>\n              <h3>Table 4</h3>\n            </div>\n            <div id=\"table_5\" className=\"passive\">\n              <h4>Load Factor: 0.00</h4>\n              <h3>Table 5</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}